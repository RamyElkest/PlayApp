const TwinBcrypt = require('twin-bcrypt')
import { Thinky } from 'thinky'

module.exports = (thinky: Thinky) => {
    const User: any = thinky.createModel('User', {
        id: thinky.type.string(),
        name: thinky.type.string().min(2).max(25).required(),
        email: thinky.type.string().email().lowercase().required(),
        cryptedPassword: thinky.type.string(),
        createdAt: thinky.type.date(),
        updatedAt: thinky.type.date()
    })

    User.ensureIndex('email')

    User.pre('save', function (next): void {
        this.updatedAt = thinky.r.now()
        this.email = this.email.toLowerCase()
        if (this.isSaved()) { return next() }
        // Validations for new users only
        if (this.id) { return next(new Error('ID is autogenerated and not auto provided.'))}
        if (!this.password) { return next(new Error('You must provide a password.'))}
        this.createdAt = thinky.r.now()
        TwinBcrypt.hash(this.password, hash => {
            this.cryptedPassword = hash
            next()
        })
    })

    User.getByEmailAndPass = async (email: string, password: string): Promise<any> => {
        const user = await User.getByEmail(email)
        if (!user) { return null }
        return TwinBcrypt.compareSync(password, user.cryptedPassword) ? user : null
    }

    User.getByEmail = async (email: string): Promise<any> => {
        try {
            const queryResult: any[] = await User.getAll(email.toLowerCase(), { index: 'email'}).run()
            if (!queryResult.length) { throw new Error() }
            return queryResult[0]
        } catch (e) { return null }
    }

    // NOTE: this method is called after all models are loaded at `/models/index.ts`
    User.defineRelations = () => {
        User.hasMany(thinky.models.Message, 'messages', 'id', 'userId')
    }

    return User
}
